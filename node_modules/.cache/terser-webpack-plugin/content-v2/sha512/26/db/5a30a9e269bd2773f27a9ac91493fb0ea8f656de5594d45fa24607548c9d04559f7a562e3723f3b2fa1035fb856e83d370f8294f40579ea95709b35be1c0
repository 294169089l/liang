{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{355:function(t,s,a){\"use strict\";a.r(s);var n=a(12),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"_13-说说你对插入排序的理解-如何实现-应用场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-说说你对插入排序的理解-如何实现-应用场景\"}},[t._v(\"#\")]),t._v(\" 13.说说你对插入排序的理解？如何实现？应用场景？\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/image-20211011084414128.png\",alt:\"图片\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"一、是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、是什么\"}},[t._v(\"#\")]),t._v(\" 一、是什么\")]),t._v(\" \"),s(\"p\",[t._v(\"插入排序（Insertion Sort），一般也被称为直接插入排序。对于少量元素的排序，它是一个有效、简单的算法\")]),t._v(\" \"),s(\"p\",[t._v(\"其主要的实现思想是将数据按照一定的顺序一个一个的插入到有序的表中，最终得到的序列就是已经排序好的数据\")]),t._v(\" \"),s(\"p\",[t._v(\"插入排序的工作方式像许多人排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下\")]),t._v(\" \"),s(\"p\",[t._v(\"然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置，该正确位置需要从右到左将它与已在手中的每张牌进行比较\")]),t._v(\" \"),s(\"p\",[t._v(\"例如一个无序数组 3、1、7、5、2、4、9、6，将其升序的结果则如下：\")]),t._v(\" \"),s(\"p\",[t._v(\"一开始有序表中无数据，直接插入3\")]),t._v(\" \"),s(\"p\",[t._v(\"从第二个数开始，插入一个元素1，然后和有序表中记录3比较，1<3，所以插入到记录 3 的左侧\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/image-20211011084407755.png\",alt:\"image-20211011084407755\"}})]),t._v(\" \"),s(\"p\",[t._v(\"向有序表插入记录 7 时，同有序表中记录 3 进行比较，3<7，所以插入到记录 3 的右侧\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/image-20211011084402545.png\",alt:\"image-20211011084402545\"}})]),t._v(\" \"),s(\"p\",[t._v(\"向有序表中插入记录 5 时，同有序表中记录 7 进行比较，5<7，同时 5>3，所以插入到 3 和 7 中间\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/image-20211011084356665.png\",alt:\"image-20211011084356665\"}})]),t._v(\" \"),s(\"p\",[t._v(\"照此规律，依次将无序表中的记录 4，9 和 6插入到有序表中\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/image-20211011084346143.png\",alt:\"image-20211011084346143\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"二、如何实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、如何实现\"}},[t._v(\"#\")]),t._v(\" 二、如何实现\")]),t._v(\" \"),s(\"p\",[t._v(\"将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\")]),t._v(\" \"),s(\"p\",[t._v(\"从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置\")]),t._v(\" \"),s(\"p\",[t._v(\"如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/IceRain-mvc/cdn/img/640-20211011084335510.gif\",alt:\"图片\"}})]),t._v(\" \"),s(\"p\",[t._v(\"用代码表示则如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"insertionSort\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"arr\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" len\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        preIndex \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        current \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"preIndex \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"preIndex\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" arr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较\"),s(\"code\",[t._v(\"N- 1\")]),t._v(\"次，时间复杂度为\"),s(\"code\",[t._v(\"O(n)\")])]),t._v(\" \"),s(\"p\",[t._v(\"最坏的情况是待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为\"),s(\"code\",[t._v(\"O(n^2)\")])]),t._v(\" \"),s(\"p\",[t._v(\"通过上面了解，可以看到插入排序是一种稳定的排序方式\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"三、应用场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、应用场景\"}},[t._v(\"#\")]),t._v(\" 三、应用场景\")]),t._v(\" \"),s(\"p\",[t._v(\"插入排序时间复杂度是 O(n2)，适用于数据量不大，算法稳定性要求高，且数据局部或整体有序的数列排序\")])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}