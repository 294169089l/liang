{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{379:function(t,s,a){\"use strict\";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"typescript面试题及答案收录\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#typescript面试题及答案收录\"}},[t._v(\"#\")]),t._v(\" TypeScript面试题及答案收录\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"1. 什么是TypeScript？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"Typescript 是一个强类型的 JavaScript 超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"2. 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。\\n优势:\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"杜绝手误导致的变量名写错;\")]),t._v(\" \"),s(\"li\",[t._v(\"类型可以一定程度上充当文档;\")]),t._v(\" \"),s(\"li\",[t._v(\"IDE自动填充，自动联想;\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"3. TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"const 和 readonly\")]),t._v(\": const可以防止变量的值被修改，readonly可以防止变量的属性被修改。\\n\"),s(\"code\",[t._v(\"枚举和常量枚举\")]),t._v(\": 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。\\n\"),s(\"code\",[t._v(\"接口和类型别名\")]),t._v(\": 两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"4. TypeScript 中 any 类型的作用是什么？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"为编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"5. TypeScript 中 any、never、unknown、null & undefined 和 void 有什么区别？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"any\")]),t._v(\": 动态的变量类型（失去了类型检查的作用）。\\n\"),s(\"code\",[t._v(\"never\")]),t._v(\": 永不存在的值的类型。例如：never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。\\n\"),s(\"code\",[t._v(\"unknown\")]),t._v(\": 任何类型的值都可以赋给 unknown 类型，但是 unknown 类型的值只能赋给 unknown 本身和 any 类型。\\n\"),s(\"code\",[t._v(\"null & undefined\")]),t._v(\": 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。\\n\"),s(\"code\",[t._v(\"void\")]),t._v(\": 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为void。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"6. TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* 可以 */\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 函数声明\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Say\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" viod\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"say\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Say \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"viod\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Array 声明\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"NumberArray\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" number\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" number\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"fibonacci\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" NumberArray \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// Class 声明\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"PersonalIntl\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sayHi\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"7. TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/* 可以 */\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"bob\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"decLiteral\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" number \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"6\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"isDone\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" boolean \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"sym\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" symbol \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"Symbol\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Person\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" number\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"8. TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"ol\",[s(\"li\",[t._v(\"TypeScript：noImplicitThis: true 的情况下，必须去声明 this 的类型，才能在函数或者对象中使用this。\")]),t._v(\" \"),s(\"li\",[t._v(\"Typescript 中箭头函数的 this 和 ES6 中箭头函数中的 this 是一致的。\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"9. TypeScript 中使用 Union Types 时有哪些注意事项？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"strong\",[t._v(\"属性或方法访问\")]),t._v(\": 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getLength\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"something\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" number\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" number \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" something\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// index.ts(2,22): error TS2339: Property 'length' does not exist on type >'string | number'.\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//   Property 'length' does not exist on type 'number'.\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[s(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"something\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" number\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" something\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 公共方法和属性可以访问\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"10. TypeScript 如何设计 Class 的声明？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-ts extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-ts\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Greeter\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   greeting\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"constructor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"message\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"greeting \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" message\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"greet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Hello, \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"greeting\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" greeter \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Greeter\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"world\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"11. TypeScript 中如何联合枚举类型的 Key?\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-ts extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-ts\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"enum\")]),t._v(\" str \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"A\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"B\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"C\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"type\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"strUnion\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"  \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"keyof\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"typeof\")]),t._v(\" str\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 'A' | 'B' | 'C'\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"12. TypeScript 中 type 和 interface 的区别?\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"相同点：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"都可以描述 '对象' 或者 '函数'\")]),t._v(\" \"),s(\"li\",[t._v(\"都允许拓展(extends)\")])]),t._v(\" \"),s(\"p\",[t._v(\"不同点：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"type 可以声明基本类型，联合类型，元组\")]),t._v(\" \"),s(\"li\",[t._v(\"type 可以使用 typeof 获取实例的类型进行赋值\")]),t._v(\" \"),s(\"li\",[t._v(\"多个相同的 interface 声明可以自动合并\")])]),t._v(\" \"),s(\"p\",[t._v(\"使用 interface 描述‘数据结构’，使用 type 描述‘类型关系’\")])]),t._v(\" \"),s(\"p\",[s(\"em\",[s(\"em\",[t._v(\"13. TypeScript 中 ?.、??、!、!.、_、*\")]),t._v(\" 等符号的含义？\")]),t._v(\"*\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"?. 可选链\")]),t._v(\" 遇到 null 和 undefined 可以立即停止表达式的运行。\\n\"),s(\"code\",[t._v(\"?? 空值合并运算符\")]),t._v(\" 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。\\n\"),s(\"code\",[t._v(\"! 非空断言运算符\")]),t._v(\" x! 将从 x 值域中排除 null 和 undefined\\n\"),s(\"code\",[t._v(\"!.\")]),t._v(\"在变量名后添加，可以断言排除undefined和null类型\\n\"),s(\"code\",[t._v(\"_ 数字分割符\")]),t._v(\" 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。\\n\"),s(\"code\",[t._v(\"**\")]),t._v(\"求幂\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"15. 简单介绍一下 TypeScript 模块的加载机制？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"假设有一个导入语句 \"),s(\"code\",[t._v('import { a } from \"moduleA\"')]),t._v(\";\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；\")]),t._v(\" \"),s(\"li\",[t._v(\"如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个\"),s(\"code\",[t._v(\"外部模块声明\")]),t._v(\"（.d.ts）；\")]),t._v(\" \"),s(\"li\",[t._v(\"最后，如果编译器还是不能解析这个模块，则会抛出一个错误 \"),s(\"code\",[t._v(\"error TS2307: Cannot find module 'moduleA'.\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"16. 简单聊聊你对 TypeScript 类型兼容性的理解？抗变、双变、协变和逆变的简单理解？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"// TODO\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"17. TypeScript 中对象展开会有什么副作用吗？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"ol\",[s(\"li\",[t._v(\"展开对象后面的属性会覆盖前面的属性；\")]),t._v(\" \"),s(\"li\",[t._v(\"仅包含对象自身的可枚举属性，不可枚举的属性将会丢失。\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"18. TypeScript 中 interface、type、enum 声明有作用域的功能吗？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"// TODO\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"19. TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"同名的interface会自动合并，同名的interface和class会自动聚合。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"20. 如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"ol\",[s(\"li\",[t._v(\"选择安装 ts 版本，\"),s(\"code\",[t._v(\"npm install @types/包名 --save\")]),t._v(\"；\")]),t._v(\" \"),s(\"li\",[t._v(\"对于没有类型的 js 库，需要编写同名的.d.ts文件\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"21. TypeScript 的 tsconfig.json 中有哪些配置项信息？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-json extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-json\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"files\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"include\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"exclude\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"compileOnSave\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"extends\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v('\"compilerOptions\"')]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" ... \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])])]),s(\"p\",[s(\"code\",[t._v(\"files\")]),t._v(\" 是一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在files中列出的文件。\\n\"),s(\"code\",[t._v(\"include & exclude\")]),t._v(\" 指定编译某些文件，或者指定排除某些文件。\\n\"),s(\"code\",[t._v(\"compileOnSave：true\")]),t._v(\" 让IDE在保存文件的时候根据tsconfig.json重新生成文件。\\n\"),s(\"code\",[t._v(\"extends\")]),t._v(\" 可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置。\\n\"),s(\"code\",[t._v(\"compilerOptions\")]),t._v(\" 编译配置项，如何对具体的ts文件进行编译\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"22. TypeScript 中如何设置模块导入的路径别名？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"通过 tsconfig.json 中的 paths 项来配置:\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"23. declare，declare global是什么？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"declare\")]),t._v(\" 是用来定义全局变量、全局函数、全局命名空间、js modules、class等\\n\"),s(\"code\",[t._v(\"declare global\")]),t._v(\" 为全局对象 \"),s(\"code\",[t._v(\"window\")]),t._v(\" 增加新的属性\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-ts extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-ts\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"declare\")]),t._v(\" global \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Window\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n        csrf\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"24. 对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"public\")]),t._v(\": 成员都默认为\"),s(\"code\",[t._v(\"public\")]),t._v(\"，被此限定符修饰的成员是可以被外部访问；\\n\"),s(\"code\",[t._v(\"private\")]),t._v(\": 被此限定符修饰的成员是只可以被类的内部访问；\\n\"),s(\"code\",[t._v(\"protected\")]),t._v(\": 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;\\n\"),s(\"code\",[t._v(\"readonly\")]),t._v(\": 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"25. keyof 和 typeof 关键字的作用？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"keyof 索引类型查询操作符\")]),t._v(\" 获取索引类型的属性名，构成联合类型。\\n\"),s(\"code\",[t._v(\"typeof\")]),t._v(\" 获取一个变量或对象的类型。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"26. 简述工具类型 \"),s(\"code\",[t._v(\"Exclude\")]),t._v(\"、\"),s(\"code\",[t._v(\"Omit\")]),t._v(\"、\"),s(\"code\",[t._v(\"Merge\")]),t._v(\"、\"),s(\"code\",[t._v(\"Intersection\")]),t._v(\"、\"),s(\"code\",[t._v(\"Overwrite\")]),t._v(\"的作用。\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"code\",[t._v(\"Exclude<T, U>\")]),t._v(\" 从 \"),s(\"code\",[t._v(\"T\")]),t._v(\" 中排除出可分配给 \"),s(\"code\",[t._v(\"U\")]),t._v(\"的元素。\\n\"),s(\"code\",[t._v(\"Omit<T, K>\")]),t._v(\" 的作用是忽略\"),s(\"code\",[t._v(\"T\")]),t._v(\"中的某些属性。\\n\"),s(\"code\",[t._v(\"Merge<O1, O2>\")]),t._v(\" 是将两个对象的属性合并。\\n\"),s(\"code\",[t._v(\"Compute<A & B>\")]),t._v(\" 是将交叉类型合并\\n\"),s(\"code\",[t._v(\"Intersection<T, U>\")]),t._v(\"的作用是取\"),s(\"code\",[t._v(\"T\")]),t._v(\"的属性,此属性同样也存在与\"),s(\"code\",[t._v(\"U\")]),t._v(\"。\\n\"),s(\"code\",[t._v(\"Overwrite<T, U>\")]),t._v(\" 是用\"),s(\"code\",[t._v(\"U\")]),t._v(\"的属性覆盖\"),s(\"code\",[t._v(\"T\")]),t._v(\"的相同属性。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"27. 数组定义的两种方式\")])]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-ts extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-ts\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"type\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Foo\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"Array\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Bar\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n     baz\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"Array\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" age\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"number\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"type\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Foo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Bar\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \\n     baz \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"string\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" age\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"number\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}